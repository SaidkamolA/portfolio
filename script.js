// DOM Elements
const navbar = document.querySelector('.navbar');
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');
const sections = document.querySelectorAll('section');
const serviceCards = document.querySelectorAll('.service-card');
const portfolioItems = document.querySelectorAll('.portfolio-item');
const contactForm = document.querySelector('.contact-form');
const backToTopBtn = document.getElementById('backToTop');
const filterBtns = document.querySelectorAll('.filter-btn');
const skillItems = document.querySelectorAll('.skill-item');

// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Scroll to section function
function scrollToSection(sectionId) {
    const section = document.querySelector(`#${sectionId}`);
    if (section) {
        section.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// Navbar scroll effect
window.addEventListener('scroll', () => {
    const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
    if (window.scrollY > 100) {
        navbar.style.background = isDark ? 'rgba(24, 24, 36, 0.98)' : 'rgba(255, 255, 255, 0.98)';
        navbar.style.boxShadow = isDark ? '0 2px 20px rgba(0, 0, 0, 0.3)' : '0 2px 20px rgba(0, 0, 0, 0.1)';
    } else {
        navbar.style.background = isDark ? 'rgba(24, 24, 36, 0.95)' : 'rgba(255, 255, 255, 0.95)';
        navbar.style.boxShadow = 'none';
    }
    
    // Back to top button
    if (window.scrollY > 500) {
        backToTopBtn.classList.add('visible');
    } else {
        backToTopBtn.classList.remove('visible');
    }
});

// Back to top functionality
backToTopBtn.addEventListener('click', () => {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
});

// Mobile menu toggle
hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    });
});

// Intersection Observer for scroll animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('fade-in-up');
        }
    });
}, observerOptions);

// Observe sections for animations
sections.forEach(section => {
    observer.observe(section);
});

// Service cards hover effects
serviceCards.forEach(card => {
    card.addEventListener('mouseenter', () => {
        card.style.transform = 'translateY(-10px) scale(1.02)';
    });
    
    card.addEventListener('mouseleave', () => {
        card.style.transform = 'translateY(0) scale(1)';
    });
});

// Portfolio filtering
filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        // Remove active class from all buttons
        filterBtns.forEach(b => b.classList.remove('active'));
        // Add active class to clicked button
        btn.classList.add('active');
        
        const filter = btn.getAttribute('data-filter');
        
        portfolioItems.forEach(item => {
            const categories = item.getAttribute('data-category').split(' ');
            
            if (filter === 'all' || categories.includes(filter)) {
                item.classList.remove('hidden');
                setTimeout(() => {
                    item.style.opacity = '1';
                    item.style.transform = 'scale(1)';
                }, 100);
            } else {
                item.style.opacity = '0';
                item.style.transform = 'scale(0.8)';
                setTimeout(() => {
                    item.classList.add('hidden');
                }, 300);
            }
        });
    });
});

// Portfolio items hover effects
portfolioItems.forEach(item => {
    item.addEventListener('mouseenter', () => {
        const overlay = item.querySelector('.portfolio-overlay');
        if (overlay) {
            overlay.style.transform = 'translateY(0)';
        }
    });
    
    item.addEventListener('mouseleave', () => {
        const overlay = item.querySelector('.portfolio-overlay');
        if (overlay) {
            overlay.style.transform = 'translateY(100%)';
        }
    });
});

// Skills animation
const skillsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const progressBars = entry.target.querySelectorAll('.skill-progress');
            progressBars.forEach(bar => {
                const width = bar.style.width;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = width;
                }, 500);
            });
            skillsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

const skillsSection = document.querySelector('.skills');
if (skillsSection) {
    skillsObserver.observe(skillsSection);
}

// Contact form handling
if (contactForm) {
    contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Get form data
        const name = contactForm.querySelector('input[type="text"]').value;
        const phone = contactForm.querySelector('input[type="tel"]').value;
        const subject = contactForm.querySelector('input[placeholder="–¢–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞"]').value;
        const projectType = contactForm.querySelector('select').value;
        const message = contactForm.querySelector('textarea').value;
        const agreement = contactForm.querySelector('input[type="checkbox"]').checked;
        
        // Simple validation
        if (!name || !phone || !subject || !projectType || !message) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        if (!isValidPhone(phone)) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
            return;
        }
        
        if (!agreement) {
            showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'error');
            return;
        }
        
        // Show loading state
        const submitBtn = contactForm.querySelector('.btn-primary');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
        submitBtn.disabled = true;
        
        try {
            // Prepare message for Telegram
            const telegramMessage = `üîî *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞*

üë§ *–ò–º—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üìã *–¢–µ–º–∞:* ${subject}
üõ† *–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:* ${projectType}
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–∞–π—Ç`;
            
            // Telegram Bot API - –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–æ—Ç
            const botToken = '7590789624:AAEEQd90l1aE23nlaEkRaNSg0p6jZ3_FmZk'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
            const chatId = '7987962865'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
            
            const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: telegramMessage,
                    parse_mode: 'Markdown'
                })
            });
            
            const result = await response.json();
            
            if (response.ok && result.ok) {
                showNotification('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!', 'success');
                contactForm.reset();
            } else {
                throw new Error(`Telegram API Error: ${result.description || 'Unknown error'}`);
            }
            
        } catch (error) {
            console.error('Error sending to Telegram:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.', 'error');
        } finally {
            // Restore button
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });
}

// Phone formatting function
function formatPhoneNumber(input) {
    let value = input.value.replace(/\D/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    
    if (value.length > 0) {
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 998, –¥–æ–±–∞–≤–ª—è–µ–º +
        if (value.startsWith('998')) {
            value = '+' + value;
        } else if (value.startsWith('98')) {
            value = '+9' + value;
        } else if (value.startsWith('8')) {
            value = '+998' + value.substring(1);
        } else if (!value.startsWith('+')) {
            value = '+998' + value;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: +998 99 910 37 16
        let formatted = '';
        const digits = value.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        
        if (digits.length >= 1) {
            formatted = '+998';
        }
        if (digits.length >= 2) {
            formatted += ' ' + digits.substring(0, 2);
        }
        if (digits.length >= 5) {
            formatted += ' ' + digits.substring(2, 5);
        }
        if (digits.length >= 7) {
            formatted += ' ' + digits.substring(5, 7);
        }
        if (digits.length >= 9) {
            formatted += ' ' + digits.substring(7, 9);
        }
        
        input.value = formatted;
    }
}

// Phone validation
function isValidPhone(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    const cleanPhone = phone.replace(/\s/g, '');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +998 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    return /^\+998\d{9}$/.test(cleanPhone);
}

// Download CV function
function downloadCV() {
    showNotification('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...', 'info');
    
    // Simulate CV download
    setTimeout(() => {
        showNotification('CV —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!', 'success');
        
        // Create a dummy CV file for download
        const cvContent = `
Saidkamolxon fullstack developer 

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
- INHA UNIVERSITY
- ITSTEP ACADEMY

–ù–ê–í–´–ö–ò:
Frontend: React.js (95%), Vue.js (90%), Angular (85%), TypeScript (92%)
Backend: Node.js (93%), Python (88%), PHP (85%), Java (80%)
–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: MongoDB (90%), PostgreSQL (87%), AWS (85%), Docker (88%)

–û–ü–´–¢ –†–ê–ë–û–¢–´:
2022-–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è: Senior Full-Stack Developer, TechCorp Solutions
2020-2022: Frontend Team Lead, Digital Innovations
2018-2020: Full-Stack Developer, StartupHub
2016-2018: Junior Developer, WebStudio Pro

–ü–†–û–ï–ö–¢–´:
- Luxury E-commerce Platform (React, Node.js, MongoDB)
- FinTech Mobile App (React Native, Firebase, AI)
- Analytics Dashboard (Vue.js, Python, Big Data)
- Fitness Tracker App (Flutter, Firebase)
- Restaurant Booking Platform (Angular, Laravel)
- AI Chat Assistant (React, Python, OpenAI)

–ö–û–ù–¢–ê–ö–¢–´:
Email: saidkamolagzamov7@gmail.com
–¢–µ–ª–µ—Ñ–æ–Ω: +998 95 001 37 16 
GitHub: github.com/Saidkamol......
LinkedIn: linkedin.com/in/saidkamol
        `;
        
        const blob = new Blob([cvContent], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'Saidkamolxon_CV.txt';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }, 1500);
}

// Notification system
function showNotification(message, type = 'info') {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close">&times;</button>
        </div>
    `;
    
    // Add styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        z-index: 10000;
        max-width: 400px;
        animation: slideInRight 0.3s ease-out;
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Close button functionality
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        notification.remove();
    });
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// Add notification styles
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
    }
    
    .notification-close {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        line-height: 1;
    }
    
    .notification-close:hover {
        opacity: 0.8;
    }
`;
document.head.appendChild(notificationStyles);

// Parallax effect for hero section
window.addEventListener('scroll', () => {
    const scrolled = window.pageYOffset;
    const hero = document.querySelector('.hero');
    if (hero) {
        const rate = scrolled * -0.5;
        hero.style.transform = `translateY(${rate}px)`;
    }
});

// Animated counter for stats
function animateCounter(element, target, duration = 2000) {
    let start = 0;
    const increment = target / (duration / 16);
    
    function updateCounter() {
        start += increment;
        if (start < target) {
            element.textContent = Math.floor(start) + (element.textContent.includes('+') ? '+' : '');
            requestAnimationFrame(updateCounter);
        } else {
            element.textContent = target + (element.textContent.includes('+') ? '+' : '');
        }
    }
    
    updateCounter();
}

// Trigger counter animation when stats are visible
const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const statNumbers = entry.target.querySelectorAll('.stat-number');
            statNumbers.forEach(stat => {
                const target = parseInt(stat.textContent.replace(/\D/g, ''));
                animateCounter(stat, target);
            });
            statsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

const heroStats = document.querySelector('.hero-stats');
if (heroStats) {
    statsObserver.observe(heroStats);
}

// Floating cards animation enhancement
const floatingCards = document.querySelectorAll('.floating-card');
floatingCards.forEach((card, index) => {
    card.addEventListener('mouseenter', () => {
        card.style.transform = 'scale(1.05) rotate(2deg)';
        card.style.zIndex = '10';
    });
    
    card.addEventListener('mouseleave', () => {
        card.style.transform = '';
        card.style.zIndex = '';
    });
});

// Typing effect for hero title
function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

// Initialize typing effect when page loads
window.addEventListener('load', () => {
    const heroTitle = document.querySelector('.hero-title');
    if (heroTitle) {
        const originalText = heroTitle.textContent;
        setTimeout(() => {
            typeWriter(heroTitle, originalText, 50);
        }, 1000);
    }
});

// Smooth reveal animation for service cards
const serviceObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
            setTimeout(() => {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }, index * 200);
        }
    });
}, { threshold: 0.1 });

serviceCards.forEach(card => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(30px)';
    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    serviceObserver.observe(card);
});

// Timeline animation
const timelineObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
            setTimeout(() => {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateX(0)';
            }, index * 300);
        }
    });
}, { threshold: 0.1 });

const timelineItems = document.querySelectorAll('.timeline-item');
timelineItems.forEach((item, index) => {
    item.style.opacity = '0';
    item.style.transform = index % 2 === 0 ? 'translateX(-50px)' : 'translateX(50px)';
    item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    timelineObserver.observe(item);
});

// Add loading animation
window.addEventListener('load', () => {
    document.body.classList.add('loaded');
});

// Add loading styles
const loadingStyles = document.createElement('style');
loadingStyles.textContent = `
    body {
        opacity: 0;
        transition: opacity 0.5s ease;
    }
    
    body.loaded {
        opacity: 1;
    }
    
    .loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        transition: opacity 0.5s ease;
    }
    
    .loading.hidden {
        opacity: 0;
        pointer-events: none;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;
document.head.appendChild(loadingStyles);

// Create loading screen
const loadingScreen = document.createElement('div');
loadingScreen.className = 'loading';
loadingScreen.innerHTML = '<div class="loading-spinner"></div>';
document.body.appendChild(loadingScreen);

// Hide loading screen when page is loaded
window.addEventListener('load', () => {
    setTimeout(() => {
        loadingScreen.classList.add('hidden');
        setTimeout(() => {
            loadingScreen.remove();
        }, 500);
    }, 1000);
});



// Performance optimization: Throttle scroll events
function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    }
}

// Apply throttling to scroll events
window.addEventListener('scroll', throttle(() => {
    // Scroll-based animations can be added here
}, 16));

// Add section header animations
const sectionHeaders = document.querySelectorAll('.section-header');
const headerObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, { threshold: 0.5 });

sectionHeaders.forEach(header => {
    header.style.opacity = '0';
    header.style.transform = 'translateY(30px)';
    header.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    headerObserver.observe(header);
});

// Add skill item hover effects
skillItems.forEach(item => {
    item.addEventListener('mouseenter', () => {
        item.style.transform = 'translateY(-5px) scale(1.02)';
        item.style.boxShadow = '0 15px 30px rgba(0, 0, 0, 0.15)';
    });
    
    item.addEventListener('mouseleave', () => {
        item.style.transform = 'translateY(0) scale(1)';
        item.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
    });
});

// Add floating shapes animation
const shapes = document.querySelectorAll('.shape');
shapes.forEach((shape, index) => {
    shape.addEventListener('mouseenter', () => {
        shape.style.transform = 'scale(1.2) rotate(45deg)';
        shape.style.opacity = '0.3';
    });
    
    shape.addEventListener('mouseleave', () => {
        shape.style.transform = '';
        shape.style.opacity = '0.1';
    });
});

console.log('üöÄ –°–∞–∏–¥ –ö–∞–º–æ–ª - –ü—Ä–µ–º–∏—É–º –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫');
console.log('‚ú® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
console.log('üìß Email: said.kamol@example.com');
console.log('üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67');

// Education logos animation
function animateEducationLogos() {
    const logos = document.querySelectorAll('.education-logo');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'scale(1)';
                }, index * 200);
            }
        });
    }, { threshold: 0.5 });
    
    logos.forEach(logo => {
        logo.style.opacity = '0';
        logo.style.transform = 'scale(0.8)';
        logo.style.transition = 'all 0.6s ease';
        observer.observe(logo);
    });
}

// Enhanced mobile menu functionality
function initMobileMenu() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-menu a');
    
    if (hamburger && navMenu) {
        hamburger.addEventListener('click', () => {
            hamburger.classList.toggle('active');
            navMenu.classList.toggle('active');
        });
        
        // Close menu when clicking on a link
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                hamburger.classList.remove('active');
                navMenu.classList.remove('active');
            });
        });
        
        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
                hamburger.classList.remove('active');
                navMenu.classList.remove('active');
            }
        });
    }
}

// Enhanced touch interactions for mobile
function initTouchOptimizations() {
    if ('ontouchstart' in window) {
        // Add touch-specific classes
        document.body.classList.add('touch-device');
        
        // Optimize hover effects for touch devices
        const hoverElements = document.querySelectorAll('.portfolio-item, .service-card, .skill-item');
        hoverElements.forEach(element => {
            element.addEventListener('touchstart', function() {
                this.classList.add('touch-active');
            });
            
            element.addEventListener('touchend', function() {
                setTimeout(() => {
                    this.classList.remove('touch-active');
                }, 300);
            });
        });
    }
}

// Enhanced responsive image loading
function initResponsiveImages() {
    const images = document.querySelectorAll('img');
    
    images.forEach(img => {
        // Add loading animation
        img.style.opacity = '0';
        img.style.transition = 'opacity 0.5s ease';
        
        img.addEventListener('load', function() {
            this.style.opacity = '1';
        });
        
        img.addEventListener('error', function() {
            this.style.opacity = '0.5';
            this.style.filter = 'grayscale(100%)';
        });
    });
}

// Enhanced scroll performance
function initScrollOptimizations() {
    let ticking = false;
    
    function updateScroll() {
        ticking = false;
        
        // Update scroll-based animations
        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.floating-shapes, .particles');
        
        parallaxElements.forEach(element => {
            const speed = element.dataset.speed || 0.5;
            element.style.transform = `translateY(${scrolled * speed}px)`;
        });
    }
    
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateScroll);
            ticking = true;
        }
    }
    
    window.addEventListener('scroll', requestTick);
}

// Enhanced form validation for mobile
function initMobileFormValidation() {
    const form = document.querySelector('.contact-form');
    
    if (form) {
        const inputs = form.querySelectorAll('input, textarea, select');
        
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                if (this.value.trim() === '') {
                    this.classList.add('error');
                } else {
                    this.classList.remove('error');
                }
            });
            
            input.addEventListener('input', function() {
                if (this.value.trim() !== '') {
                    this.classList.remove('error');
                }
            });
        });
        
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            let isValid = true;
            inputs.forEach(input => {
                if (input.hasAttribute('required') && input.value.trim() === '') {
                    input.classList.add('error');
                    isValid = false;
                }
            });
            
            if (isValid) {
                showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
                form.reset();
            } else {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            }
        });
    }
}

// Initialize phone formatting
function initPhoneFormatting() {
    const phoneInput = document.querySelector('input[type="tel"]');
    if (phoneInput) {
        phoneInput.addEventListener('input', function() {
            formatPhoneNumber(this);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ +998 –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        phoneInput.addEventListener('focus', function() {
            if (this.value === '+998 ') {
                this.setSelectionRange(5, 5); // –°—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ +998 
            }
        });
    }
}

// Theme toggle logic
function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    const icon = document.querySelector('.theme-icon');
    if (icon) {
        icon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }
}

function toggleTheme() {
    const current = document.documentElement.getAttribute('data-theme') || 'light';
    setTheme(current === 'dark' ? 'light' : 'dark');
}

document.addEventListener('DOMContentLoaded', () => {
    // Init theme from localStorage or system
    const saved = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setTheme(saved ? saved : (prefersDark ? 'dark' : 'light'));
    // Add event
    const btn = document.querySelector('.theme-toggle');
    if (btn) btn.addEventListener('click', toggleTheme);
});

// --- MULTILANGUAGE LOGIC ---
async function loadTranslations() {
  const res = await fetch('translations.json');
  return await res.json();
}

function setLanguage(lang, translations) {
  localStorage.setItem('lang', lang);
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.getAttribute('data-i18n');
    if (translations[lang][key]) {
      el.innerHTML = translations[lang][key];
    }
  });
  document.getElementById('lang-ru').classList.toggle('active', lang === 'ru');
  document.getElementById('lang-en').classList.toggle('active', lang === 'en');
}

window.addEventListener('DOMContentLoaded', async () => {
  const translations = await loadTranslations();
  const savedLang = localStorage.getItem('lang') || 'ru';
  setLanguage(savedLang, translations);
  document.getElementById('lang-ru').onclick = () => setLanguage('ru', translations);
  document.getElementById('lang-en').onclick = () => setLanguage('en', translations);
});

// Initialize all enhanced features
document.addEventListener('DOMContentLoaded', function() {
    // Existing initializations
    initTypingEffect();
    initScrollAnimations();
    initPortfolioFilters();
    initContactForm();
    initBackToTop();
    initCursorTrail();
    initFloatingShapes();
    initParticles();
    
    // New enhanced features
    initPhoneFormatting();
    animateEducationLogos();
    initMobileMenu();
    initTouchOptimizations();
    initResponsiveImages();
    initScrollOptimizations();
    initMobileFormValidation();
    
    // Enhanced intersection observer for better performance
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);
    
    // Observe all sections
    document.querySelectorAll('section').forEach(section => {
        observer.observe(section);
    });
});

// Quote system
const quotes = [
    {
        text: "–õ—É—á—à–∏–π –∫–æ–¥ ‚Äî —ç—Ç–æ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å. –ü–∏—à–∏—Ç–µ –∫–æ–¥ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –µ–≥–æ –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ø–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç, –≥–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ.",
        author: "–î–∂–æ–Ω –í—É–¥—Å"
    },
    {
        text: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–≥–æ-—Ç–æ –∏–∑ –Ω–∏—á–µ–≥–æ –∏ –∑–∞—Ç–µ–º –ø—Ä–æ–¥–∞–∂–∏ —ç—Ç–æ–≥–æ.",
        author: "–ú–∏—Ç—á –ö–µ–π–ø–æ—Ä"
    },
    {
        text: "–õ—é–±–æ–π –¥—É—Ä–∞–∫ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–π–º–µ—Ç. –•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø–∏—à—É—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ª—é–¥–∏ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å.",
        author: "–ú–∞—Ä—Ç–∏–Ω –§–∞—É–ª–µ—Ä"
    },
    {
        text: "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        author: "–°—Ç–∏–≤ –î–∂–æ–±—Å"
    },
    {
        text: "–ö–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ª–∂–µ—Ç, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–Ω–æ–≥–¥–∞.",
        author: "–†–æ–Ω –î–∂–µ—Ñ—Ñ—Ä–∏—Å"
    },
    {
        text: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –æ —Ç–æ–º, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –≤—Å–µ. –≠—Ç–æ –æ —Ç–æ–º, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –≥–¥–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.",
        author: "–î–∂–æ–Ω –ó–∞–∫"
    },
    {
        text: "–ü–µ—Ä–≤—ã–π –ø—Ä–∏–Ω—Ü–∏–ø: –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ –∑–Ω–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
        author: "–õ–∏–Ω–¥–∞ –†–∞–π—Å–º–∞–Ω"
    },
    {
        text: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–æ, –∫–æ–≥–¥–∞ –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å.",
        author: "–ê–ª–∞–Ω –ö–µ–π"
    },
    {
        text: "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.",
        author: "–≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç"
    },
    {
        text: "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —à–∞–≥–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –∫ –¥—Ä—É–≥–æ–π, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
        author: "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"
    }
];

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞



// Calculator Logic
const prices = {
    website: { simple: 500, medium: 1200, complex: 2500, expert: 5000 },
    app: { simple: 800, medium: 2000, complex: 4000, expert: 8000 },
    bot: { simple: 200, medium: 500, complex: 1000, expert: 2000 },
    api: { simple: 400, medium: 1000, complex: 2500, expert: 5000 },
    custom: { simple: 1000, medium: 2500, complex: 5000, expert: 10000 }
};

const addons = {
    design: 300,
    seo: 200,
    support: 150,
    hosting: 100
};

function calculatePrice() {
    const projectType = document.getElementById('projectType').value;
    const complexity = document.getElementById('complexity').value;
    const timeline = parseInt(document.getElementById('timeline').value) || 14;
    
    if (!projectType || !complexity) {
        showPlaceholder();
        return;
    }
    
    let basePrice = prices[projectType][complexity];
    
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É
    const complexityMultiplier = {
        simple: 1,
        medium: 1.2,
        complex: 1.5,
        expert: 2
    };
    
    basePrice *= complexityMultiplier[complexity];
    
    // –°—Ä–æ–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω—É
    const timelineMultiplier = timeline <= 7 ? 1.3 : timeline <= 14 ? 1.1 : 1;
    basePrice *= timelineMultiplier;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    let addonsPrice = 0;
    const addonItems = [];
    
    if (document.getElementById('design').checked) {
        addonsPrice += addons.design;
        addonItems.push('–î–∏–∑–∞–π–Ω');
    }
    if (document.getElementById('seo').checked) {
        addonsPrice += addons.seo;
        addonItems.push('SEO');
    }
    if (document.getElementById('support').checked) {
        addonsPrice += addons.support;
        addonItems.push('–ü–æ–¥–¥–µ—Ä–∂–∫–∞');
    }
    if (document.getElementById('hosting').checked) {
        addonsPrice += addons.hosting;
        addonItems.push('–•–æ—Å—Ç–∏–Ω–≥');
    }
    
    const totalPrice = basePrice + addonsPrice;
    
    displayPrice(totalPrice, basePrice, addonsPrice, addonItems, timeline);
}

function displayPrice(total, base, addons, addonItems, timeline) {
    const resultDiv = document.getElementById('calculatorResult');
    
    const complexityText = {
        simple: '–ü—Ä–æ—Å—Ç–∞—è',
        medium: '–°—Ä–µ–¥–Ω—è—è', 
        complex: '–°–ª–æ–∂–Ω–∞—è',
        expert: '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è'
    };
    
    const projectText = {
        website: '–í–µ–±-—Å–∞–π—Ç',
        app: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        bot: 'Telegram –±–æ—Ç',
        api: 'API/Backend',
        custom: '–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
    };
    
    const projectType = document.getElementById('projectType').value;
    const complexity = document.getElementById('complexity').value;
    
    resultDiv.innerHTML = `
        <div class="price-display">$${total.toLocaleString()}</div>
        <div class="price-breakdown">
            <p><strong>${projectText[projectType]}</strong> (${complexityText[complexity]})</p>
            <p>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${base.toLocaleString()}</p>
            ${addonItems.length > 0 ? `<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${addonItems.join(', ')} - $${addons.toLocaleString()}</p>` : ''}
            <p>–°—Ä–æ–∫–∏: ${timeline} –¥–Ω–µ–π</p>
        </div>
    `;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    resultDiv.style.opacity = '0';
    resultDiv.style.transform = 'translateY(20px)';
    setTimeout(() => {
        resultDiv.style.transition = 'all 0.5s ease';
        resultDiv.style.opacity = '1';
        resultDiv.style.transform = 'translateY(0)';
    }, 100);
}

function showPlaceholder() {
    const resultDiv = document.getElementById('calculatorResult');
    resultDiv.innerHTML = `
        <div class="result-placeholder">
            <i class="fas fa-arrow-up"></i>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</p>
        </div>
    `;
}

function getDiscount() {
    const resultDiv = document.getElementById('calculatorResult');
    const priceDisplay = resultDiv.querySelector('.price-display');
    
    if (!priceDisplay) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞!');
        return;
    }
    
    const currentPrice = parseInt(priceDisplay.textContent.replace(/[^0-9]/g, ''));
    const discount = Math.floor(currentPrice * 0.15); // 15% —Å–∫–∏–¥–∫–∞
    const finalPrice = currentPrice - discount;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫–∏–¥–∫–∏
    priceDisplay.style.transform = 'scale(1.1)';
    priceDisplay.style.color = '#10b981';
    
    setTimeout(() => {
        priceDisplay.innerHTML = `
            <div style="text-decoration: line-through; color: #ef4444; font-size: 1.5rem;">$${currentPrice.toLocaleString()}</div>
            <div style="color: #10b981; font-size: 2rem;">$${finalPrice.toLocaleString()}</div>
        `;
        priceDisplay.style.transform = 'scale(1)';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ —Å–∫–∏–¥–∫–∏
        const discountCode = 'CALC15OFF';
        resultDiv.innerHTML += `
            <div style="margin-top: 1rem; padding: 1rem; background: rgba(16, 185, 129, 0.1); border-radius: 8px; border: 1px solid rgba(16, 185, 129, 0.3);">
                <p style="margin: 0; color: #10b981; font-weight: 600;">üéâ –°–∫–∏–¥–∫–∞ 15% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!</p>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.9rem; color: var(--text-secondary);">–ö–æ–¥: <strong>${discountCode}</strong></p>
            </div>
        `;
        
        // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç
        showSuccessAnimation();
    }, 500);
}

// Quote functionality for the new quote section
const quoteData = [
    {
        text: "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —à–∞–≥–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –∫ –¥—Ä—É–≥–æ–π, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
        author: "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
        title: "–ü—Ä–µ–º—å–µ—Ä-–º–∏–Ω–∏—Å—Ç—Ä –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏"
    }
];

// –£–±–∏—Ä–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ –æ–¥–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const quoteNav = document.querySelector('.quote-navigation');
    if (quoteNav) {
        quoteNav.style.display = 'none';
    }
});
